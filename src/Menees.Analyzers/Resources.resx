<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Men001Description" xml:space="preserve">
    <value>The code contains space characters used for indentation.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="Men001MessageFormat" xml:space="preserve">
    <value>Tabs should be used for indentation.</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="Men001Title" xml:space="preserve">
    <value>Tabs should be used for indentation</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="Men002Description" xml:space="preserve">
    <value>Lines should be a readable, maintainable length.</value>
  </data>
  <data name="Men002MessageFormat" xml:space="preserve">
    <value>Line must be no longer than {0} characters (now {1}).</value>
  </data>
  <data name="Men002MessageFormatNotify" xml:space="preserve">
    <value>Line is over {0} characters (now {1}).</value>
  </data>
  <data name="Men002Title" xml:space="preserve">
    <value>Line is too long</value>
  </data>
  <data name="Men002TitleNotify" xml:space="preserve">
    <value>Line is long</value>
  </data>
  <data name="Men003Description" xml:space="preserve">
    <value>Methods should be a readable, maintainable length.</value>
  </data>
  <data name="Men003MessageFormat" xml:space="preserve">
    <value>{0} must be no longer than {1} lines (now {2}).</value>
  </data>
  <data name="Men003Title" xml:space="preserve">
    <value>Method is too long</value>
  </data>
  <data name="Men004Description" xml:space="preserve">
    <value>Property accessors should be a readable, maintainable length.</value>
  </data>
  <data name="Men004MessageFormat" xml:space="preserve">
    <value>{0} must be no longer than {1} lines (now {2}).</value>
  </data>
  <data name="Men004Title" xml:space="preserve">
    <value>Property accessor is too long</value>
  </data>
  <data name="Men005Description" xml:space="preserve">
    <value>Files should be a readable, maintainable length.</value>
  </data>
  <data name="Men005MessageFormat" xml:space="preserve">
    <value>File {0} must be no longer than {1} lines (now {2}).</value>
  </data>
  <data name="Men005Title" xml:space="preserve">
    <value>File is too long</value>
  </data>
  <data name="Men006Description" xml:space="preserve">
    <value>#regions should be used to group related items in large code files.</value>
  </data>
  <data name="Men006MessageFormat" xml:space="preserve">
    <value>#regions should be used{0}.</value>
  </data>
  <data name="Men006Title" xml:space="preserve">
    <value>#regions should be used</value>
  </data>
  <data name="Men007Description" xml:space="preserve">
    <value>Using a single return keeps control flow simple and makes refactoring easier.</value>
  </data>
  <data name="Men007MessageFormat" xml:space="preserve">
    <value>Multiple return statements ({0}) are used in {1}.</value>
  </data>
  <data name="Men007MessageFormatVoid" xml:space="preserve">
    <value>A return statement is used in {0}, which returns void.</value>
  </data>
  <data name="Men007Title" xml:space="preserve">
    <value>Use a single return</value>
  </data>
  <data name="Men008Description" xml:space="preserve">
    <value>A file's name should match or include the name of the main type it contains.</value>
  </data>
  <data name="Men008MessageFormat" xml:space="preserve">
    <value>File name {0} {1}.</value>
  </data>
  <data name="Men008Title" xml:space="preserve">
    <value>File name should match type</value>
  </data>
  <data name="Men009Description" xml:space="preserve">
    <value>Using preferred exception types makes calling code more consistent and maintainable.</value>
  </data>
  <data name="Men009MessageFormat" xml:space="preserve">
    <value>Use {0} instead of {1}.</value>
  </data>
  <data name="Men009Title" xml:space="preserve">
    <value>Use the preferred exception type</value>
  </data>
  <data name="Men010Description" xml:space="preserve">
    <value>Using named constants instead of numeric literals in expressions improves readability and maintainability.</value>
  </data>
  <data name="Men010MessageFormat" xml:space="preserve">
    <value>The numeric literal {0} should be replaced with a named constant.</value>
  </data>
  <data name="Men010Title" xml:space="preserve">
    <value>Avoid magic numbers</value>
  </data>
  <data name="Men011Description" xml:space="preserve">
    <value>Using directives should be indented consistently based on their nesting level inside a namespace.</value>
  </data>
  <data name="Men011MessageFormat" xml:space="preserve">
    <value>The using directive should be indented consistent with its nesting level.</value>
  </data>
  <data name="Men011Title" xml:space="preserve">
    <value>Align using directives</value>
  </data>
  <data name="Men012Description" xml:space="preserve">
    <value>Flags enum members should be powers of two or bitwise-or combinations of named members.</value>
  </data>
  <data name="Men012MessageFormat" xml:space="preserve">
    <value>Flags enum member {0}.{1} has value {2}, which is not a {3}power of two.</value>
  </data>
  <data name="Men012MessageFormatNoValue" xml:space="preserve">
    <value>Flags enum member {0}.{1} should explicitly assign its value to zero or a power of two.</value>
  </data>
  <data name="Men012Title" xml:space="preserve">
    <value>Flags should be powers of two</value>
  </data>
  <data name="Men013Description" xml:space="preserve">
    <value>UTC times are safer because they're unambiguous and always increasing.</value>
  </data>
  <data name="Men013MessageFormat" xml:space="preserve">
    <value>Use {0} instead of {1}.</value>
  </data>
  <data name="Men013Title" xml:space="preserve">
    <value>Use UTC time</value>
  </data>
  <data name="Men014Description" xml:space="preserve">
    <value>TryGetValue does a single key lookup, which is more efficient than doing a ContainsKey lookup and a this[key] lookup.</value>
  </data>
  <data name="Men014MessageFormat" xml:space="preserve">
    <value>Use {0} instead of {1} and {2}.</value>
  </data>
  <data name="Men014Title" xml:space="preserve">
    <value>Prefer TryGetValue</value>
  </data>
  <data name="Men015Description" xml:space="preserve">
    <value>Preferred terms and casing should be used in identifiers.</value>
  </data>
  <data name="Men015MessageFormat" xml:space="preserve">
    <value>Use {0} instead of {1}.</value>
  </data>
  <data name="Men015Title" xml:space="preserve">
    <value>Use preferred terms</value>
  </data>
  <data name="Men016Description" xml:space="preserve">
    <value>Top-level statements should be avoided in long-term code for consistency and maintainability with other object-oriented modules.</value>
  </data>
  <data name="Men016MessageFormat" xml:space="preserve">
    <value>Use object-oriented methods instead of top-level statements.</value>
  </data>
  <data name="Men016Title" xml:space="preserve">
    <value>Avoid top-level statements</value>
  </data>
  <data name="Men017Description" xml:space="preserve">
    <value>A private set accessor is not needed when an auto property is only assigned in the constructor.</value>
  </data>
  <data name="Men017MessageFormat" xml:space="preserve">
    <value>Remove the unused private set accessor from the {0} auto property.</value>
  </data>
  <data name="Men017Title" xml:space="preserve">
    <value>Remove unused private setter</value>
  </data>
  <data name="Men018Description" xml:space="preserve">
    <value>Numeric literals should use digit separators to improve readability.</value>
  </data>
  <data name="Men018MessageFormat" xml:space="preserve">
    <value>The numeric literal {0} should use digit separators.</value>
  </data>
  <data name="Men018Title" xml:space="preserve">
    <value>Use digit separators</value>
  </data>
  <data name="Men019Description" xml:space="preserve">
    <value>An async method should take a CancellationToken parameter or take a parameter that has a public CancellationToken property.</value>
  </data>
  <data name="Men019MessageFormat" xml:space="preserve">
    <value>Async method {0} should take a CancellationToken parameter.</value>
  </data>
  <data name="Men019Title" xml:space="preserve">
    <value>Async method needs CancellationToken</value>
  </data>
</root>